{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"py-unite-db Unnofficial Python wrapper for the unite-db.com REST API. Introduction Please be warned that this is an unofficial wrapper and the REST API is a private one, so please do not abuse it. If you are publishing any of the data collected with this API, please give credit to unite-db . They spend many hours collecting this data. Usage Import the UniteDb object: from py_unite_db import UniteDb unite_db = UniteDb() Let's get the names of all supporter Pokemon: >>> [pokemon.name for pokemon in unite_db.pokemon if pokemon.role == \"Supporter\"] ['Blissey', 'Eldegoss', 'Mr.Mime', 'Wigglytuff'] What can I fetch? See what you can fetch with the UniteDb object. To see what attributes belong to each model, have a look at the models .","title":"Overview"},{"location":"#py-unite-db","text":"Unnofficial Python wrapper for the unite-db.com REST API.","title":"py-unite-db"},{"location":"#introduction","text":"Please be warned that this is an unofficial wrapper and the REST API is a private one, so please do not abuse it. If you are publishing any of the data collected with this API, please give credit to unite-db . They spend many hours collecting this data.","title":"Introduction"},{"location":"#usage","text":"Import the UniteDb object: from py_unite_db import UniteDb unite_db = UniteDb() Let's get the names of all supporter Pokemon: >>> [pokemon.name for pokemon in unite_db.pokemon if pokemon.role == \"Supporter\"] ['Blissey', 'Eldegoss', 'Mr.Mime', 'Wigglytuff']","title":"Usage"},{"location":"#what-can-i-fetch","text":"See what you can fetch with the UniteDb object. To see what attributes belong to each model, have a look at the models .","title":"What can I fetch?"},{"location":"todo/","text":"Todo Models Pokemon Details Stats Stars In-Game Stats Evolutions Abilities Passive Moves Items Held Items Battle Items Docs Design Examples Add basic example(s) Add in-depth example(s) Docstrings Minimal Extensive Tests Models Pokemon Stats Stars Evolution Item Held Item Battle Item Checking REST API for breaking changes Coverage Add Coverage Report >90% Coverage Release Set up package release on PyPI Set up automatic github workflow Add installation guide","title":"Todo"},{"location":"todo/#todo","text":"","title":"Todo"},{"location":"todo/#models","text":"Pokemon Details Stats Stars In-Game Stats Evolutions Abilities Passive Moves Items Held Items Battle Items","title":"Models"},{"location":"todo/#docs","text":"Design Examples Add basic example(s) Add in-depth example(s) Docstrings Minimal Extensive","title":"Docs"},{"location":"todo/#tests","text":"Models Pokemon Stats Stars Evolution Item Held Item Battle Item Checking REST API for breaking changes Coverage Add Coverage Report >90% Coverage","title":"Tests"},{"location":"todo/#release","text":"Set up package release on PyPI Set up automatic github workflow Add installation guide","title":"Release"},{"location":"development/contributing/","text":"Contributing This project uses pdm . $ pdm install Running the tests The project uses pytest . $ pdm run pytest Type Checking The project must pass mypy type checking. $ pdm run typecheck If you are using mypy with an IDE like VS Code make sure you have run $ pdm run stubs To work around mypy not supporting PEP582 yet. See https://github.com/python/mypy/issues/10633 for more info on this. Formatting Imports are sorted with isort and source files are formatted with black . $ pdm run format $ pdm run formatcheck If you are using VS Code this will be automatically done on save. Linting Linting is provided by flake8 . $ pdm run lint Conventional Commits The project follows the conventional commit style. Docs This project uses mkdocs , mkdocstrings , mkdocs-material for its documentation. $ pdm run fetch_charm $ pdm run mkdocs serve","title":"Contributing"},{"location":"development/contributing/#contributing","text":"This project uses pdm . $ pdm install","title":"Contributing"},{"location":"development/contributing/#running-the-tests","text":"The project uses pytest . $ pdm run pytest","title":"Running the tests"},{"location":"development/contributing/#type-checking","text":"The project must pass mypy type checking. $ pdm run typecheck If you are using mypy with an IDE like VS Code make sure you have run $ pdm run stubs To work around mypy not supporting PEP582 yet. See https://github.com/python/mypy/issues/10633 for more info on this.","title":"Type Checking"},{"location":"development/contributing/#formatting","text":"Imports are sorted with isort and source files are formatted with black . $ pdm run format $ pdm run formatcheck If you are using VS Code this will be automatically done on save.","title":"Formatting"},{"location":"development/contributing/#linting","text":"Linting is provided by flake8 . $ pdm run lint","title":"Linting"},{"location":"development/contributing/#conventional-commits","text":"The project follows the conventional commit style.","title":"Conventional Commits"},{"location":"development/contributing/#docs","text":"This project uses mkdocs , mkdocstrings , mkdocs-material for its documentation. $ pdm run fetch_charm $ pdm run mkdocs serve","title":"Docs"},{"location":"development/script_reference/","text":"Script Reference scripts.stubs Usage: stubs.py <path to project directory> stubs ( dir : Path ) Collect library stubs and symlink, then ignore missing import errors. This should be run after adding any library stubs e.g types-requests . To work around this issue . Original code by pawamoy : https://github.com/python/mypy/issues/10633#issuecomment-974840203 and extended by jaynewey . Source code in scripts/stubs.py def stubs ( dir : Path ): \"\"\"Collect library stubs and symlink, then ignore missing import errors. This should be run after adding any library stubs e.g `types-requests`. To work around [this issue](https://github.com/python/mypy/issues/10633). Original code by `pawamoy`: [https://github.com/python/mypy/issues/10633#issuecomment-974840203]() and extended by `jaynewey`. \"\"\" os . chdir ( str ( dir )) # compute packages directory path py = f \" { sys . version_info . major } . { sys . version_info . minor } \" pkgs_dir = Path ( \"__pypackages__\" , py , \"lib\" ) . resolve () # build the list of available packages packages = {} for package in pkgs_dir . glob ( \"*\" ): if ( package . suffix not in { \".dist-info\" , \".pth\" } and package . name != \"__pycache__\" ): packages [ package . name ] = package # handle .pth files for pth in pkgs_dir . glob ( \"*.pth\" ): with suppress ( OSError ): for package in Path ( Path ( pth ) . read_text () . splitlines ()[ 0 ]) . glob ( \"*\" ): if package . suffix != \".dist-info\" : packages [ package . name ] = package stub_dir = Path ( \".stubs/\" ) rmtree ( stub_dir , ignore_errors = True ) stub_dir . mkdir ( parents = True , exist_ok = True ) # symlink the stubs ignore = set () for stubs in ( path for name , path in packages . items () if name . endswith ( \"-stubs\" )): Path ( stub_dir , stubs . name ) . symlink_to ( stubs , target_is_directory = True ) # try to symlink the corresponding package # see https://www.python.org/dev/peps/pep-0561/#stub-only-packages pkg_name = stubs . name . replace ( \"-stubs\" , \"\" ) if pkg_name in packages : ignore . add ( pkg_name ) Path ( stub_dir , pkg_name ) . symlink_to ( packages [ pkg_name ], target_is_directory = True ) # create temporary mypy config to ignore stubbed packages mypy_config = Path ( \"mypy.ini\" ) config_contents = mypy_config . read_text () if mypy_config . exists () else \"\" config_contents += \"[mypy] \\n mypy_path = $MYPY_CONFIG_FILE_DIR\" config_contents += \" \\n \" + \" \\n\\n \" . join ( f \"[mypy- { pkg } .*] \\n ignore_errors=true\" for pkg in ignore ) Path ( stub_dir , \"mypy.ini\" ) . write_text ( config_contents ) scripts.fetch_charm Usage: fetch_charm.py <path to assets folder> fetch_charm ( dir : Path ) Fetches all Charm icons and puts in specified folder. Fetches from latest GitHub release. See Charm Icons . Parameters: Name Type Description Default dir Path The directory to store the icons in. Will store at '{dir}/charm/'. required Source code in scripts/fetch_charm.py def fetch_charm ( dir : Path ): \"\"\"Fetches all Charm icons and puts in specified folder. Fetches from latest GitHub release. See [Charm Icons](https://github.com/jaynewey/charm-icons). Args: dir: The directory to store the icons in. Will store at '{dir}/charm/'. \"\"\" # first do some checks - if we don't have to fetch, don't # if the directory {dir}/charm exists and is not empty, do not fetch charm_dir = dir / \"charm\" if charm_dir . is_dir () and any ( charm_dir . iterdir ()): return # else, begin our procedure os . chdir ( str ( dir )) version = ( requests . get ( _LATEST_RELEASE_URL ) . url ) . split ( \"/\" )[ - 1 ] tar = requests . get ( f \" { _RELEASES_URL } / { version } .tar.gz\" , stream = True ) file = tarfile . open ( fileobj = tar . raw , mode = \"r|gz\" ) file . extractall () shutil . rmtree ( \"charm/\" , ignore_errors = True ) shutil . copytree ( f \"charm-icons- { version [ 1 :] } /icons/\" , \"charm/\" ) shutil . rmtree ( f \"charm-icons- { version [ 1 :] } /\" )","title":"Script Reference"},{"location":"development/script_reference/#script-reference","text":"","title":"Script Reference"},{"location":"development/script_reference/#scripts.stubs","text":"Usage: stubs.py <path to project directory>","title":"stubs"},{"location":"development/script_reference/#scripts.stubs.stubs","text":"Collect library stubs and symlink, then ignore missing import errors. This should be run after adding any library stubs e.g types-requests . To work around this issue . Original code by pawamoy : https://github.com/python/mypy/issues/10633#issuecomment-974840203 and extended by jaynewey . Source code in scripts/stubs.py def stubs ( dir : Path ): \"\"\"Collect library stubs and symlink, then ignore missing import errors. This should be run after adding any library stubs e.g `types-requests`. To work around [this issue](https://github.com/python/mypy/issues/10633). Original code by `pawamoy`: [https://github.com/python/mypy/issues/10633#issuecomment-974840203]() and extended by `jaynewey`. \"\"\" os . chdir ( str ( dir )) # compute packages directory path py = f \" { sys . version_info . major } . { sys . version_info . minor } \" pkgs_dir = Path ( \"__pypackages__\" , py , \"lib\" ) . resolve () # build the list of available packages packages = {} for package in pkgs_dir . glob ( \"*\" ): if ( package . suffix not in { \".dist-info\" , \".pth\" } and package . name != \"__pycache__\" ): packages [ package . name ] = package # handle .pth files for pth in pkgs_dir . glob ( \"*.pth\" ): with suppress ( OSError ): for package in Path ( Path ( pth ) . read_text () . splitlines ()[ 0 ]) . glob ( \"*\" ): if package . suffix != \".dist-info\" : packages [ package . name ] = package stub_dir = Path ( \".stubs/\" ) rmtree ( stub_dir , ignore_errors = True ) stub_dir . mkdir ( parents = True , exist_ok = True ) # symlink the stubs ignore = set () for stubs in ( path for name , path in packages . items () if name . endswith ( \"-stubs\" )): Path ( stub_dir , stubs . name ) . symlink_to ( stubs , target_is_directory = True ) # try to symlink the corresponding package # see https://www.python.org/dev/peps/pep-0561/#stub-only-packages pkg_name = stubs . name . replace ( \"-stubs\" , \"\" ) if pkg_name in packages : ignore . add ( pkg_name ) Path ( stub_dir , pkg_name ) . symlink_to ( packages [ pkg_name ], target_is_directory = True ) # create temporary mypy config to ignore stubbed packages mypy_config = Path ( \"mypy.ini\" ) config_contents = mypy_config . read_text () if mypy_config . exists () else \"\" config_contents += \"[mypy] \\n mypy_path = $MYPY_CONFIG_FILE_DIR\" config_contents += \" \\n \" + \" \\n\\n \" . join ( f \"[mypy- { pkg } .*] \\n ignore_errors=true\" for pkg in ignore ) Path ( stub_dir , \"mypy.ini\" ) . write_text ( config_contents )","title":"stubs()"},{"location":"development/script_reference/#scripts.fetch_charm","text":"Usage: fetch_charm.py <path to assets folder>","title":"fetch_charm"},{"location":"development/script_reference/#scripts.fetch_charm.fetch_charm","text":"Fetches all Charm icons and puts in specified folder. Fetches from latest GitHub release. See Charm Icons . Parameters: Name Type Description Default dir Path The directory to store the icons in. Will store at '{dir}/charm/'. required Source code in scripts/fetch_charm.py def fetch_charm ( dir : Path ): \"\"\"Fetches all Charm icons and puts in specified folder. Fetches from latest GitHub release. See [Charm Icons](https://github.com/jaynewey/charm-icons). Args: dir: The directory to store the icons in. Will store at '{dir}/charm/'. \"\"\" # first do some checks - if we don't have to fetch, don't # if the directory {dir}/charm exists and is not empty, do not fetch charm_dir = dir / \"charm\" if charm_dir . is_dir () and any ( charm_dir . iterdir ()): return # else, begin our procedure os . chdir ( str ( dir )) version = ( requests . get ( _LATEST_RELEASE_URL ) . url ) . split ( \"/\" )[ - 1 ] tar = requests . get ( f \" { _RELEASES_URL } / { version } .tar.gz\" , stream = True ) file = tarfile . open ( fileobj = tar . raw , mode = \"r|gz\" ) file . extractall () shutil . rmtree ( \"charm/\" , ignore_errors = True ) shutil . copytree ( f \"charm-icons- { version [ 1 :] } /icons/\" , \"charm/\" ) shutil . rmtree ( f \"charm-icons- { version [ 1 :] } /\" )","title":"fetch_charm()"},{"location":"reference/unite_db/","text":"UniteDb py_unite_db.UniteDb ( UniteDbBase ) Wrapper for the Unite DB rest API. Examples: >>> from py_unite_db import UniteDb >>> unite_db = UniteDb () >>> unite_db . pokemon [ 0 ] . name 'Absol' >>> unite_db . held_items [ 0 ] . name 'Aeos Cookie' Source code in py_unite_db/__init__.py class UniteDb ( UniteDbBase ): \"\"\"Wrapper for the Unite DB rest API. Example: >>> from py_unite_db import UniteDb >>> unite_db = UniteDb() >>> unite_db.pokemon[0].name 'Absol' >>> unite_db.held_items[0].name 'Aeos Cookie' \"\"\" def __init__ ( self ): super () . __init__ ( BASE_URL , requests . Session ()) battle_items : list inherited property readonly Get all battle items. Returns list of BattleItem . held_items : list inherited property readonly Get all held items. Returns list of HeldItem . pokemon : list cached inherited property writable Get all pokemon. Returns list of Pokemon .","title":"UniteDb"},{"location":"reference/unite_db/#unitedb","text":"","title":"UniteDb"},{"location":"reference/unite_db/#py_unite_db.UniteDb","text":"Wrapper for the Unite DB rest API. Examples: >>> from py_unite_db import UniteDb >>> unite_db = UniteDb () >>> unite_db . pokemon [ 0 ] . name 'Absol' >>> unite_db . held_items [ 0 ] . name 'Aeos Cookie' Source code in py_unite_db/__init__.py class UniteDb ( UniteDbBase ): \"\"\"Wrapper for the Unite DB rest API. Example: >>> from py_unite_db import UniteDb >>> unite_db = UniteDb() >>> unite_db.pokemon[0].name 'Absol' >>> unite_db.held_items[0].name 'Aeos Cookie' \"\"\" def __init__ ( self ): super () . __init__ ( BASE_URL , requests . Session ())","title":"UniteDb"},{"location":"reference/unite_db/#py_unite_db.UniteDb.battle_items","text":"Get all battle items. Returns list of BattleItem .","title":"battle_items"},{"location":"reference/unite_db/#py_unite_db.UniteDb.held_items","text":"Get all held items. Returns list of HeldItem .","title":"held_items"},{"location":"reference/unite_db/#py_unite_db.UniteDb.pokemon","text":"Get all pokemon. Returns list of Pokemon .","title":"pokemon"},{"location":"reference/models/item/","text":"Item py_unite_db.models.item.Item ( BaseModel ) pydantic-model Parent class for Battle and Held items. See here for a list of all items on the unite-db website. Source code in py_unite_db/models/item.py class Item ( BaseModel ): \"\"\"Parent class for Battle and Held items. See [here](https://unite-db.com/items) for a list of all items on the unite-db website. \"\"\" name : str = Field ( ... , description = \"Name of this item.\" ) display_name : str = Field ( ... , description = \"Display name of this item.\" ) tier : Tier = Field ( ... , description = \"What tier unite-db consider this item to be.\" ) description : str = Field ( ... , description = \"Description of this item.\" ) description : str pydantic-field required Description of this item. display_name : str pydantic-field required Display name of this item. name : str pydantic-field required Name of this item. tier : Literal [ 'S' , 'A' , 'B' , 'C' , 'D' , 'T' ] pydantic-field required What tier unite-db consider this item to be.","title":"Item"},{"location":"reference/models/item/#item","text":"","title":"Item"},{"location":"reference/models/item/#py_unite_db.models.item.Item","text":"Parent class for Battle and Held items. See here for a list of all items on the unite-db website. Source code in py_unite_db/models/item.py class Item ( BaseModel ): \"\"\"Parent class for Battle and Held items. See [here](https://unite-db.com/items) for a list of all items on the unite-db website. \"\"\" name : str = Field ( ... , description = \"Name of this item.\" ) display_name : str = Field ( ... , description = \"Display name of this item.\" ) tier : Tier = Field ( ... , description = \"What tier unite-db consider this item to be.\" ) description : str = Field ( ... , description = \"Description of this item.\" )","title":"Item"},{"location":"reference/models/item/#py_unite_db.models.item.Item.description","text":"Description of this item.","title":"description"},{"location":"reference/models/item/#py_unite_db.models.item.Item.display_name","text":"Display name of this item.","title":"display_name"},{"location":"reference/models/item/#py_unite_db.models.item.Item.name","text":"Name of this item.","title":"name"},{"location":"reference/models/item/#py_unite_db.models.item.Item.tier","text":"What tier unite-db consider this item to be.","title":"tier"},{"location":"reference/models/pokemon/","text":"Pokemon py_unite_db.models.pokemon.Pokemon ( BaseModel ) pydantic-model Class representing a Pokemon. See all Pokemon here on the unite-db website. Get all pokemon from the API using UniteDb.pokemon . Examples: >>> from py_unite_db import UniteDb >>> unite_db = UniteDb () >>> unite_db . pokemon [ 0 ] . name 'Absol' >>> unite_db . pokemon [ 0 ] . tier 'C' Source code in py_unite_db/models/pokemon.py class Pokemon ( BaseModel ): \"\"\"Class representing a Pokemon. See all Pokemon [here](https://unite-db.com) on the unite-db website. Get all pokemon from the API using [`UniteDb.pokemon`][py_unite_db.UniteDb]. Example: >>> from py_unite_db import UniteDb >>> unite_db = UniteDb() >>> unite_db.pokemon[0].name 'Absol' >>> unite_db.pokemon[0].tier 'C' \"\"\" name : str = Field ( ... , description = \"Name of the Pokemon.\" ) notes : str = Field ( \"\" , description = \"Things to note about the Pokemon.\" ) tier : Tier = Field ( ... , description = \"\"\"What tier unite-db consider this Pokemon to be. From S being the top tier, to D being the lowest. T is for Pokemon coming soon.\"\"\" , ) damage_type : DamageType = Field ( ... , description = \"Physical or special attacker.\" ) stars : Optional [ Stars ] = Field ( ... , description = \"How many stars the pokemon has for each stat in the game.\" ) stats : list [ Stats ] = Field ([], description = \"This Pokemon's stats.\" ) range : Range = Field ( ... , description = \"Ranged or Melee attacker.\" ) difficulty : Difficulty = Field ( ... , description = \"The in-game difficulty rating of the Pokemon.\" ) role : Role = Field ( ... , description = \"The role of the Pokemon.\" ) soon : bool = Field ( ... , description = \"Whether the Pokemon is coming soon or not.\" ) evolution : list [ Evolution ] = Field ( [], description = \"List of the Pokemon's evolutions.\" ) def stats_at ( self , level : int ) -> Stats : \"\"\"Gets stats at a given level between 1 and 15. Args: level: The level at which to get stats at. Example: >>> from py_unite_db import UniteDb >>> UniteDb().pokemon[0].stats_at(7) Stats(hp=3823, attack=293, defense=109, sp_attack=47, sp_defense=76, crit=5, cooldown_reduction=10, lifesteal=0) If the level given is less than 1, gets level 1. If the level given is more than 15, gets level 15. \"\"\" # noqa: E501 level = min ( POKEMON_MAX_LEVEL , max ( POKEMON_MIN_LEVEL , level )) return self . stats [ level - 1 ] @staticmethod def _transform ( v : dict [ str , Any ]) -> dict [ str , Any ]: return _flatten ( v , \"tags\" ) damage_type : Literal [ 'Physical' , 'Special' ] pydantic-field required Physical or special attacker. difficulty : Literal [ 'Novice' , 'Intermediate' , 'Expert' ] pydantic-field required The in-game difficulty rating of the Pokemon. evolution : list pydantic-field List of the Pokemon's evolutions. name : str pydantic-field required Name of the Pokemon. notes : str pydantic-field Things to note about the Pokemon. range : Literal [ 'Ranged' , 'Melee' ] pydantic-field required Ranged or Melee attacker. role : Literal [ 'All-Rounder' , 'Attacker' , 'Defender' , 'Speedster' , 'Supporter' ] pydantic-field required The role of the Pokemon. soon : bool pydantic-field required Whether the Pokemon is coming soon or not. stars : Stars pydantic-field required How many stars the pokemon has for each stat in the game. stats : list pydantic-field This Pokemon's stats. tier : Literal [ 'S' , 'A' , 'B' , 'C' , 'D' , 'T' ] pydantic-field required What tier unite-db consider this Pokemon to be. From S being the top tier, to D being the lowest. T is for Pokemon coming soon. stats_at ( self , level : int ) -> Stats Gets stats at a given level between 1 and 15. Parameters: Name Type Description Default level int The level at which to get stats at. required Examples: >>> from py_unite_db import UniteDb >>> UniteDb () . pokemon [ 0 ] . stats_at ( 7 ) Stats ( hp = 3823 , attack = 293 , defense = 109 , sp_attack = 47 , sp_defense = 76 , crit = 5 , cooldown_reduction = 10 , lifesteal = 0 ) If the level given is less than 1, gets level 1. If the level given is more than 15, gets level 15. Source code in py_unite_db/models/pokemon.py def stats_at ( self , level : int ) -> Stats : \"\"\"Gets stats at a given level between 1 and 15. Args: level: The level at which to get stats at. Example: >>> from py_unite_db import UniteDb >>> UniteDb().pokemon[0].stats_at(7) Stats(hp=3823, attack=293, defense=109, sp_attack=47, sp_defense=76, crit=5, cooldown_reduction=10, lifesteal=0) If the level given is less than 1, gets level 1. If the level given is more than 15, gets level 15. \"\"\" # noqa: E501 level = min ( POKEMON_MAX_LEVEL , max ( POKEMON_MIN_LEVEL , level )) return self . stats [ level - 1 ]","title":"Pokemon"},{"location":"reference/models/pokemon/#pokemon","text":"","title":"Pokemon"},{"location":"reference/models/pokemon/#py_unite_db.models.pokemon.Pokemon","text":"Class representing a Pokemon. See all Pokemon here on the unite-db website. Get all pokemon from the API using UniteDb.pokemon . Examples: >>> from py_unite_db import UniteDb >>> unite_db = UniteDb () >>> unite_db . pokemon [ 0 ] . name 'Absol' >>> unite_db . pokemon [ 0 ] . tier 'C' Source code in py_unite_db/models/pokemon.py class Pokemon ( BaseModel ): \"\"\"Class representing a Pokemon. See all Pokemon [here](https://unite-db.com) on the unite-db website. Get all pokemon from the API using [`UniteDb.pokemon`][py_unite_db.UniteDb]. Example: >>> from py_unite_db import UniteDb >>> unite_db = UniteDb() >>> unite_db.pokemon[0].name 'Absol' >>> unite_db.pokemon[0].tier 'C' \"\"\" name : str = Field ( ... , description = \"Name of the Pokemon.\" ) notes : str = Field ( \"\" , description = \"Things to note about the Pokemon.\" ) tier : Tier = Field ( ... , description = \"\"\"What tier unite-db consider this Pokemon to be. From S being the top tier, to D being the lowest. T is for Pokemon coming soon.\"\"\" , ) damage_type : DamageType = Field ( ... , description = \"Physical or special attacker.\" ) stars : Optional [ Stars ] = Field ( ... , description = \"How many stars the pokemon has for each stat in the game.\" ) stats : list [ Stats ] = Field ([], description = \"This Pokemon's stats.\" ) range : Range = Field ( ... , description = \"Ranged or Melee attacker.\" ) difficulty : Difficulty = Field ( ... , description = \"The in-game difficulty rating of the Pokemon.\" ) role : Role = Field ( ... , description = \"The role of the Pokemon.\" ) soon : bool = Field ( ... , description = \"Whether the Pokemon is coming soon or not.\" ) evolution : list [ Evolution ] = Field ( [], description = \"List of the Pokemon's evolutions.\" ) def stats_at ( self , level : int ) -> Stats : \"\"\"Gets stats at a given level between 1 and 15. Args: level: The level at which to get stats at. Example: >>> from py_unite_db import UniteDb >>> UniteDb().pokemon[0].stats_at(7) Stats(hp=3823, attack=293, defense=109, sp_attack=47, sp_defense=76, crit=5, cooldown_reduction=10, lifesteal=0) If the level given is less than 1, gets level 1. If the level given is more than 15, gets level 15. \"\"\" # noqa: E501 level = min ( POKEMON_MAX_LEVEL , max ( POKEMON_MIN_LEVEL , level )) return self . stats [ level - 1 ] @staticmethod def _transform ( v : dict [ str , Any ]) -> dict [ str , Any ]: return _flatten ( v , \"tags\" )","title":"Pokemon"},{"location":"reference/models/pokemon/#py_unite_db.models.pokemon.Pokemon.damage_type","text":"Physical or special attacker.","title":"damage_type"},{"location":"reference/models/pokemon/#py_unite_db.models.pokemon.Pokemon.difficulty","text":"The in-game difficulty rating of the Pokemon.","title":"difficulty"},{"location":"reference/models/pokemon/#py_unite_db.models.pokemon.Pokemon.evolution","text":"List of the Pokemon's evolutions.","title":"evolution"},{"location":"reference/models/pokemon/#py_unite_db.models.pokemon.Pokemon.name","text":"Name of the Pokemon.","title":"name"},{"location":"reference/models/pokemon/#py_unite_db.models.pokemon.Pokemon.notes","text":"Things to note about the Pokemon.","title":"notes"},{"location":"reference/models/pokemon/#py_unite_db.models.pokemon.Pokemon.range","text":"Ranged or Melee attacker.","title":"range"},{"location":"reference/models/pokemon/#py_unite_db.models.pokemon.Pokemon.role","text":"The role of the Pokemon.","title":"role"},{"location":"reference/models/pokemon/#py_unite_db.models.pokemon.Pokemon.soon","text":"Whether the Pokemon is coming soon or not.","title":"soon"},{"location":"reference/models/pokemon/#py_unite_db.models.pokemon.Pokemon.stars","text":"How many stars the pokemon has for each stat in the game.","title":"stars"},{"location":"reference/models/pokemon/#py_unite_db.models.pokemon.Pokemon.stats","text":"This Pokemon's stats.","title":"stats"},{"location":"reference/models/pokemon/#py_unite_db.models.pokemon.Pokemon.tier","text":"What tier unite-db consider this Pokemon to be. From S being the top tier, to D being the lowest. T is for Pokemon coming soon.","title":"tier"},{"location":"reference/models/pokemon/#py_unite_db.models.pokemon.Pokemon.stats_at","text":"Gets stats at a given level between 1 and 15. Parameters: Name Type Description Default level int The level at which to get stats at. required Examples: >>> from py_unite_db import UniteDb >>> UniteDb () . pokemon [ 0 ] . stats_at ( 7 ) Stats ( hp = 3823 , attack = 293 , defense = 109 , sp_attack = 47 , sp_defense = 76 , crit = 5 , cooldown_reduction = 10 , lifesteal = 0 ) If the level given is less than 1, gets level 1. If the level given is more than 15, gets level 15. Source code in py_unite_db/models/pokemon.py def stats_at ( self , level : int ) -> Stats : \"\"\"Gets stats at a given level between 1 and 15. Args: level: The level at which to get stats at. Example: >>> from py_unite_db import UniteDb >>> UniteDb().pokemon[0].stats_at(7) Stats(hp=3823, attack=293, defense=109, sp_attack=47, sp_defense=76, crit=5, cooldown_reduction=10, lifesteal=0) If the level given is less than 1, gets level 1. If the level given is more than 15, gets level 15. \"\"\" # noqa: E501 level = min ( POKEMON_MAX_LEVEL , max ( POKEMON_MIN_LEVEL , level )) return self . stats [ level - 1 ]","title":"stats_at()"},{"location":"reference/models/items/battle_item/","text":"Battle Item py_unite_db.models.battle_item.BattleItem ( Item ) pydantic-model Class representing a Battle Item. Get all battle items from the api with UniteDb.battle_items . In the game, you can select one battle item per battle. Source code in py_unite_db/models/battle_item.py class BattleItem ( Item ): \"\"\"Class representing a Battle Item. Get all battle items from the api with [`UniteDb.battle_items`][py_unite_db.UniteDb]. In the game, you can select one battle item per battle. \"\"\" cooldown : int = Field ( ... , description = \"The cooldown of the item in seconds.\" ) unlock_level : int = Field ( ... , description = \"The trainer level at which this item is unlocked.\" ) @staticmethod def _transform ( v : dict [ str , Any ]) -> dict [ str , Any ]: v [ \"unlock_level\" ] = v . pop ( \"level\" ) return v cooldown : int pydantic-field required The cooldown of the item in seconds. description : str pydantic-field required Description of this item. display_name : str pydantic-field required Display name of this item. name : str pydantic-field required Name of this item. tier : Literal [ 'S' , 'A' , 'B' , 'C' , 'D' , 'T' ] pydantic-field required What tier unite-db consider this item to be. unlock_level : int pydantic-field required The trainer level at which this item is unlocked.","title":"Battle Item"},{"location":"reference/models/items/battle_item/#battle-item","text":"","title":"Battle Item"},{"location":"reference/models/items/battle_item/#py_unite_db.models.battle_item.BattleItem","text":"Class representing a Battle Item. Get all battle items from the api with UniteDb.battle_items . In the game, you can select one battle item per battle. Source code in py_unite_db/models/battle_item.py class BattleItem ( Item ): \"\"\"Class representing a Battle Item. Get all battle items from the api with [`UniteDb.battle_items`][py_unite_db.UniteDb]. In the game, you can select one battle item per battle. \"\"\" cooldown : int = Field ( ... , description = \"The cooldown of the item in seconds.\" ) unlock_level : int = Field ( ... , description = \"The trainer level at which this item is unlocked.\" ) @staticmethod def _transform ( v : dict [ str , Any ]) -> dict [ str , Any ]: v [ \"unlock_level\" ] = v . pop ( \"level\" ) return v","title":"BattleItem"},{"location":"reference/models/items/battle_item/#py_unite_db.models.battle_item.BattleItem.cooldown","text":"The cooldown of the item in seconds.","title":"cooldown"},{"location":"reference/models/items/battle_item/#py_unite_db.models.battle_item.BattleItem.description","text":"Description of this item.","title":"description"},{"location":"reference/models/items/battle_item/#py_unite_db.models.battle_item.BattleItem.display_name","text":"Display name of this item.","title":"display_name"},{"location":"reference/models/items/battle_item/#py_unite_db.models.battle_item.BattleItem.name","text":"Name of this item.","title":"name"},{"location":"reference/models/items/battle_item/#py_unite_db.models.battle_item.BattleItem.tier","text":"What tier unite-db consider this item to be.","title":"tier"},{"location":"reference/models/items/battle_item/#py_unite_db.models.battle_item.BattleItem.unlock_level","text":"The trainer level at which this item is unlocked.","title":"unlock_level"},{"location":"reference/models/items/held_item/","text":"Held Item py_unite_db.models.held_item.HeldItem ( Item ) pydantic-model Class representing a held item. Get all held items from the api with UniteDb.held_items . In the game, you can select up to 3 held items in battle. Held items can be upgraded up to level 30. Source code in py_unite_db/models/held_item.py class HeldItem ( Item ): \"\"\"Class representing a held item. Get all held items from the api with [`UniteDb.held_items`][py_unite_db.UniteDb]. In the game, you can select up to 3 held items in battle. Held items can be upgraded up to level 30. \"\"\" effect : LevelItemEffect \"\"\"The effect of the held item\"\"\" scaling_effects : list [ ScalingItemEffect ] @staticmethod def _transform ( v : dict [ str , Any ]) -> dict [ str , Any ]: v [ \"description\" ] = v . pop ( \"description1\" ) v [ \"scaling_effects\" ] = v . pop ( \"stats\" ) # make base for main effect v [ \"effect\" ] = { \"label\" : v . get ( \"description3\" , \"\" )} | { k : v . get ( k , \"\" ) for k in ( \"level1\" , \"level10\" , \"level20\" ) } return v description : str pydantic-field required Description of this item. display_name : str pydantic-field required Display name of this item. effect : LevelItemEffect pydantic-field required name : str pydantic-field required Name of this item. scaling_effects : list pydantic-field required tier : Literal [ 'S' , 'A' , 'B' , 'C' , 'D' , 'T' ] pydantic-field required What tier unite-db consider this item to be.","title":"Held Item"},{"location":"reference/models/items/held_item/#held-item","text":"","title":"Held Item"},{"location":"reference/models/items/held_item/#py_unite_db.models.held_item.HeldItem","text":"Class representing a held item. Get all held items from the api with UniteDb.held_items . In the game, you can select up to 3 held items in battle. Held items can be upgraded up to level 30. Source code in py_unite_db/models/held_item.py class HeldItem ( Item ): \"\"\"Class representing a held item. Get all held items from the api with [`UniteDb.held_items`][py_unite_db.UniteDb]. In the game, you can select up to 3 held items in battle. Held items can be upgraded up to level 30. \"\"\" effect : LevelItemEffect \"\"\"The effect of the held item\"\"\" scaling_effects : list [ ScalingItemEffect ] @staticmethod def _transform ( v : dict [ str , Any ]) -> dict [ str , Any ]: v [ \"description\" ] = v . pop ( \"description1\" ) v [ \"scaling_effects\" ] = v . pop ( \"stats\" ) # make base for main effect v [ \"effect\" ] = { \"label\" : v . get ( \"description3\" , \"\" )} | { k : v . get ( k , \"\" ) for k in ( \"level1\" , \"level10\" , \"level20\" ) } return v","title":"HeldItem"},{"location":"reference/models/items/held_item/#py_unite_db.models.held_item.HeldItem.description","text":"Description of this item.","title":"description"},{"location":"reference/models/items/held_item/#py_unite_db.models.held_item.HeldItem.display_name","text":"Display name of this item.","title":"display_name"},{"location":"reference/models/items/held_item/#py_unite_db.models.held_item.HeldItem.effect","text":"","title":"effect"},{"location":"reference/models/items/held_item/#py_unite_db.models.held_item.HeldItem.name","text":"Name of this item.","title":"name"},{"location":"reference/models/items/held_item/#py_unite_db.models.held_item.HeldItem.scaling_effects","text":"","title":"scaling_effects"},{"location":"reference/models/items/held_item/#py_unite_db.models.held_item.HeldItem.tier","text":"What tier unite-db consider this item to be.","title":"tier"},{"location":"reference/models/pokemon/evolution/","text":"Evolution py_unite_db.models.pokemon.Evolution ( BaseModel ) pydantic-model Source code in py_unite_db/models/pokemon.py class Evolution ( BaseModel ): name : str level : int level : int pydantic-field required name : str pydantic-field required","title":"Evolution"},{"location":"reference/models/pokemon/evolution/#evolution","text":"","title":"Evolution"},{"location":"reference/models/pokemon/evolution/#py_unite_db.models.pokemon.Evolution","text":"Source code in py_unite_db/models/pokemon.py class Evolution ( BaseModel ): name : str level : int","title":"Evolution"},{"location":"reference/models/pokemon/evolution/#py_unite_db.models.pokemon.Evolution.level","text":"","title":"level"},{"location":"reference/models/pokemon/evolution/#py_unite_db.models.pokemon.Evolution.name","text":"","title":"name"},{"location":"reference/models/pokemon/stars/","text":"Stars py_unite_db.models.pokemon.Stars ( BaseModel ) pydantic-model Source code in py_unite_db/models/pokemon.py class Stars ( BaseModel ): combat : int resistance : int mobility : int scoring : int assistance : int total : int assistance : int pydantic-field required combat : int pydantic-field required mobility : int pydantic-field required resistance : int pydantic-field required scoring : int pydantic-field required total : int pydantic-field required","title":"Stars"},{"location":"reference/models/pokemon/stars/#stars","text":"","title":"Stars"},{"location":"reference/models/pokemon/stars/#py_unite_db.models.pokemon.Stars","text":"Source code in py_unite_db/models/pokemon.py class Stars ( BaseModel ): combat : int resistance : int mobility : int scoring : int assistance : int total : int","title":"Stars"},{"location":"reference/models/pokemon/stars/#py_unite_db.models.pokemon.Stars.assistance","text":"","title":"assistance"},{"location":"reference/models/pokemon/stars/#py_unite_db.models.pokemon.Stars.combat","text":"","title":"combat"},{"location":"reference/models/pokemon/stars/#py_unite_db.models.pokemon.Stars.mobility","text":"","title":"mobility"},{"location":"reference/models/pokemon/stars/#py_unite_db.models.pokemon.Stars.resistance","text":"","title":"resistance"},{"location":"reference/models/pokemon/stars/#py_unite_db.models.pokemon.Stars.scoring","text":"","title":"scoring"},{"location":"reference/models/pokemon/stars/#py_unite_db.models.pokemon.Stars.total","text":"","title":"total"},{"location":"reference/models/pokemon/stats/","text":"Stats py_unite_db.models.stats.Stats ( BaseModel ) pydantic-model Stats of a pokemon at a particular level View all stats here on the unite-db website. Source code in py_unite_db/models/stats.py class Stats ( BaseModel ): \"\"\"Stats of a pokemon at a particular level View all stats [here](https://unite-db.com/stats) on the unite-db website. \"\"\" # absolute hp : int attack : int defense : int sp_attack : int sp_defense : int # percentages crit : int cooldown_reduction : int lifesteal : int @staticmethod def _transform ( v : dict [ str , Any ]) -> dict [ str , Any ]: v [ \"cooldown_reduction\" ] = v . pop ( \"cdr\" ) # make cdr more user friendly return v attack : int pydantic-field required cooldown_reduction : int pydantic-field required crit : int pydantic-field required defense : int pydantic-field required hp : int pydantic-field required lifesteal : int pydantic-field required sp_attack : int pydantic-field required sp_defense : int pydantic-field required","title":"Stats"},{"location":"reference/models/pokemon/stats/#stats","text":"","title":"Stats"},{"location":"reference/models/pokemon/stats/#py_unite_db.models.stats.Stats","text":"Stats of a pokemon at a particular level View all stats here on the unite-db website. Source code in py_unite_db/models/stats.py class Stats ( BaseModel ): \"\"\"Stats of a pokemon at a particular level View all stats [here](https://unite-db.com/stats) on the unite-db website. \"\"\" # absolute hp : int attack : int defense : int sp_attack : int sp_defense : int # percentages crit : int cooldown_reduction : int lifesteal : int @staticmethod def _transform ( v : dict [ str , Any ]) -> dict [ str , Any ]: v [ \"cooldown_reduction\" ] = v . pop ( \"cdr\" ) # make cdr more user friendly return v","title":"Stats"},{"location":"reference/models/pokemon/stats/#py_unite_db.models.stats.Stats.attack","text":"","title":"attack"},{"location":"reference/models/pokemon/stats/#py_unite_db.models.stats.Stats.cooldown_reduction","text":"","title":"cooldown_reduction"},{"location":"reference/models/pokemon/stats/#py_unite_db.models.stats.Stats.crit","text":"","title":"crit"},{"location":"reference/models/pokemon/stats/#py_unite_db.models.stats.Stats.defense","text":"","title":"defense"},{"location":"reference/models/pokemon/stats/#py_unite_db.models.stats.Stats.hp","text":"","title":"hp"},{"location":"reference/models/pokemon/stats/#py_unite_db.models.stats.Stats.lifesteal","text":"","title":"lifesteal"},{"location":"reference/models/pokemon/stats/#py_unite_db.models.stats.Stats.sp_attack","text":"","title":"sp_attack"},{"location":"reference/models/pokemon/stats/#py_unite_db.models.stats.Stats.sp_defense","text":"","title":"sp_defense"}]}